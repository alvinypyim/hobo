#!/usr/bin/env bash
set -e

main() {
  mark_version
  copy_src_files
  configure_git
  install_apt_packages
  install_docker_compose
  install_rbenv
  install_pyenv
  install_nvm
  install_phpbrew
  install_composer
  install_stackup
  install_global_python
  install_awscli
  install_ebcli
  clean_apt
}

mark_version() {
  [ -z "$BOX_VERSION" ] || echo "$BOX_VERSION" > ~/box-version
}

copy_src_files() {
  pushd /vagrant/src
  cp -v vimrc ~/.vimrc
  cp -v inputrc ~/.inputrc
  cp -vR install stackup ~
  popd
}

configure_git() {
  git config --global core.editor "$(which vim)"
  git config --global merge.conflictstyle diff3
  cp -v /vagrant/src/gitignore ~/.gitignore
  git config --global core.excludesfile ~/.gitignore
}

install_apt_packages() {
  sudo apt-get update
  sudo apt-get -y install \
    jq \
    alpine \
    bc \
    openjdk-8-jdk \
    nfs-common \
    unzip
}

clean_apt() {
  sudo apt-get clean
  sudo rm -Rf /var/lib/apt/lists/*
}

install_docker_compose() {
  sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

install_rbenv() {
  sudo apt-get -y install \
    autoconf \
    bison \
    build-essential \
    libssl-dev \
    libyaml-dev \
    libreadline6-dev \
    zlib1g-dev \
    libncurses5-dev \
    libffi-dev \
    libgdbm3 \
    libgdbm-dev
  pushd ~
  git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.profile
  echo 'eval "$(rbenv init -)"' >> ~/.profile
  mkdir -vp ~/.rbenv/plugins
  git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
  popd
  if . ~/.profile; then echo -n; fi
}

install_pyenv() {
  git clone https://github.com/pyenv/pyenv.git ~/.pyenv
  echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.profile
  echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.profile
  echo '! command -v pyenv &> /dev/null || eval "$(pyenv init -)"' >> ~/.profile
  if . ~/.profile; then echo -n; fi
}

install_nvm() {
  curl https://raw.githubusercontent.com/creationix/nvm/v0.33.4/install.sh | bash
}

install_global_python() {
  pyenv install 2.7.14
  pyenv global 2.7.14
  pip install virtualenv
}

install_awscli() {
  pip install awscli
}

install_ebcli() {
  mkdir -v eb
  pushd eb
  virtualenv vendor/virtualenv
  vendor/virtualenv/bin/pip install awsebcli
  echo 'exec "$(dirname "$0")"/vendor/virtualenv/bin/eb "$@"' > call
  chmod -v +x call
  popd
  echo 'export EDITOR="$(which vim)"' >> ~/.profile
}

install_phpbrew() {
  local phpbrew_executable

  phpbrew_executable="$(mktemp)"
  curl -L "-o$phpbrew_executable" https://github.com/phpbrew/phpbrew/raw/master/phpbrew
  chmod -v +x "$phpbrew_executable"
  sudo mv -v "$phpbrew_executable" /usr/local/bin/phpbrew

  sudo apt-get -y install \
    php7.0 \
    php7.0-curl \
    php7.0-json \
    php7.0-cgi \
    php7.0-fpm \
    autoconf \
    automake \
    libxml2-dev \
    libcurl4-openssl-dev \
    libssl-dev \
    openssl \
    gettext \
    libicu-dev \
    libmcrypt-dev \
    libmcrypt4 \
    libbz2-dev \
    libreadline-dev \
    build-essential \
    libmhash-dev \
    libmhash2 \
    libxslt1-dev \
    libmagickwand-dev \
    libmagickcore-dev \
    libmysqlclient-dev \
    libmysqld-dev

  phpbrew init
  echo '[ ! -e ~/.phpbrew/bashrc ] || . ~/.phpbrew/bashrc' >> ~/.bashrc
}

install_composer() {
  local temp_path

  temp_path="$(mktemp -d)"
  pushd "$temp_path"
  /vagrant/vendor/download-composer
  sudo mv -v composer.phar /usr/local/bin/composer
  popd
  rm -vRf "$temp_path"
}

install_stackup() {
  rbenv install "$(cat ~/stackup/.ruby-version)"
  rbenv rehash
  pushd ~/stackup
  gem install bundler -N
  bundle --path vendor/bundle
  popd
}

main
